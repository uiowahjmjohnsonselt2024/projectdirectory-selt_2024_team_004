<div class="container">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <div class="top-banner">
    <h2 class="title">Pretty Pirates</h2>

    <%= stylesheet_link_tag 'landing', media: 'all', 'data-turbo-track': 'reload', defer: true %>
    <%= javascript_include_tag 'landing', 'data-turbo-track': 'reload', defer: true %>

    <div class="dropdown-menu-container">
      <button class="dropdown-button">Menu</button>
      <div class="dropdown-content">
        <%= link_to 'Settings', settings_path(return_path: request.fullpath), class:'btn btn-primary dropdown_link' %>
        <a href="#" id="store-link">Store</a>
        <%= link_to 'Exit World', worlds_path, class:'btn btn-primary dropdown_link' %>
      </div>
    </div>
  </div>

  <!-- Debug info -->
  <% if @squares.present? %>
  <% end %>

  <div class="grid-teleport-container">
    <div class="grid">
      <% if @squares.present? %>
        <% @squares.each do |square| %>
          <div class="grid-item"
               id="square_<%= square.square_id %>"
               data-square-id="<%= square.square_id %>"
               data-x="<%= square.x %>"
               data-y="<%= square.y %>">
            <% if square.code.present? %>
              <canvas width="105" height="105"></canvas>
              <script>
                document.addEventListener('DOMContentLoaded', () => {
                  const canvas = document.querySelector('#square_<%= square.square_id %> canvas');
                  const ctx = canvas.getContext('2d');
                  <%= square.code.html_safe %>
                });
              </script>
            <% else %>
              <canvas width="105" height="105"></canvas>
              <script>
                document.addEventListener('DOMContentLoaded', () => {
                  const canvas = document.querySelector('#square_<%= square.square_id %> canvas');
                  const ctx = canvas.getContext('2d');
                  ctx.fillStyle = '#eee';
                  ctx.fillRect(0, 0, 105, 105);
                  ctx.fillStyle = '#666';
                  ctx.font = '12px Arial';
                  ctx.fillText('(<%= square.x %>, <%= square.y %>)', 35, 55);
                });
              </script>
            <% end %>
          </div>
        <% end %>
        <% @world.characters.each do |character| %>
          <% 
            # Simple grid-based positioning
            tile_size = 105
            grid_offset_x = 450  # Adjusted base offset to match grid
            grid_offset_y = 175  # Adjusted base offset to match grid
            
            # Calculate position based on grid coordinates
            char_x = grid_offset_x + (character.x_coord.to_i * tile_size)
            char_y = grid_offset_y + (character.y_coord.to_i * tile_size)
          %>
          <div class="character"
               data-character-id="<%= character.id %>"
               data-is-current-user="<%= character.user_id == current_user.id %>"
               data-x="<%= character.x_coord %>"
               data-y="<%= character.y_coord %>"
               style="position: absolute; 
                      top: <%= char_y %>px; 
                      left: <%= char_x %>px;
                      z-index: 1000;">
            <%= image_tag asset_path(character.image_code), width: '100', height: '100' if character.image_code %>
          </div>
        <% end %>
      <% else %>
        <p>No squares found for this world!</p>
      <% end %>
    </div>

    <div class="teleport-container" data-character-id="<%= @character.id %>">
      <%= form_with url: coordinates_path, method: :post, local: true do |form| %>
        <%= form.hidden_field :id, value: @character&.id %>
        <%= form.hidden_field :x, value: '', id: 'x-coord' %>
        <%= form.hidden_field :y, value: '', id: 'y-coord' %>
        <%= form.submit 'Save World', class: 'btn btn-primary', id:"teleport-button" %>
      <% end %>
      <p class="shards-count">Shards: <%= @character.shards || "Can't find shard count.y" %></p>
    </div>
  </div>

  <!-- Store Modal -->
  <div id="store-modal" class="modal">
    <div class="modal-content">
      <div class="store-banner">
        <h2 class="store-title">Store</h2>
      </div>
      <span class="close-button">&times;</span>
      <div class="store-grid">
        <% @prices.each do |key, price| %>
          <div class="store-grid-item">
            <button class="item-button" data-name="<%= key.to_s.humanize %>" data-price="<%= price %> <%= @currency %>">
              <div class="item-content">
                <%= image_tag "shards/#{key}.png", alt: "#{key.to_s.humanize}", style: "width: 100%; height: auto; object-fit: cover; border-radius: 8px;" %>
                <p class="item-price"><%= key.to_s.humanize %>: <br><%= price %> <%= @currency %></p>
                <% if key.to_s == 'hat_of_shards_50' %>
                  <p class="discount">20% off!</p>
                <% elsif key.to_s == 'chest_of_shards_100' %>
                  <p class="discount">33% off!</p>
                <% end %>
              </div>
            </button>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <!-- Purchase Modal -->
  <div id="purchase-modal" class="modal">
    <div class="modal-content">
      <div class="store-banner">
        <h2 class="store-title">Purchase Item</h2>
      </div>
      <span class="close-button">&times;</span>
      <div class="purchase-form">
        <h3 id="item-name"></h3>
        <p id="item-price"></p>
        <form id="purchase-form">
          <label for="card-number">Card Number:</label>
          <input type="text" id="card-number" name="card-number" placeholder="XXXX XXXX XXXX XXXX" required>

          <label for="expiration-date">Expiration Date:</label>
          <input type="text" id="expiration-date" name="expiration-date" placeholder="MM/YY" required>

          <label for="cvv">CVV:</label>
          <input type="text" id="cvv" name="cvv" placeholder="XXX" required>

          <button type="submit" class="btn">Purchase</button>
        </form>
      </div>
    </div>
  </div>
  <!-- Unlock Square Modal -->
  <div id="popup-modal" class="modal">
    <div class="modal-content">
      <span class="close-button">&times;</span>
      <h3>Square Details</h3>
      <p id="square-coordinates"></p>
      <div class="button-container">
        <a href="<%= matching_game_path(world_id: @world.id, user_id: @user.id) %>" id="minigame-button" class="button">Play Minigame</a>
        <button id="pay-shard-button" class="button">Pay 10 shards</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const character = document.querySelector(`.character[data-character-id="${<%= @character.id %>}"]`);
    const xCoordField = document.querySelector('#x-coord');
    const yCoordField = document.querySelector('#y-coord');
    const saveWorldButton = document.querySelector('#save-world-button');
    const modal = document.getElementById('popup-modal');
    const closeButton = modal.querySelector('.close-button');
    const squareCoordinates = document.getElementById('square-coordinates');
    const squareId = document.getElementById('square-id');
    const gridItems = document.querySelectorAll('.grid-item');
    const gameResult = <%= @game_result.to_json %>;

      // Grid configuration
    const gridSize = 6; // 6x6 grid
    const tileSize = 105; // Each tile is 100px x 100px

    // Function to calculate grid offsets
    function calculateGridOffsets() {
      const gridWidth = gridSize * tileSize;
      const gridHeight = gridSize * tileSize;
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;

      return {
        x_char: (screenWidth - gridWidth) / 2,
        y_char: (screenHeight - gridHeight) / 2
      };
    }

    // Function to move character to the correct tile
    function moveCharacterToTile(x, y) {
      const gridOffsets = calculateGridOffsets();

      // Adjust the position to account for the misalignment
      const characterX = gridOffsets.x_char + (x - 1) * tileSize + tileSize / 2 - 50; // Fix off-by-one issue
      const characterY = gridOffsets.y_char + y * tileSize + tileSize / 2 - 50;

      character.style.left = `${characterX}px`;
      character.style.top = `${characterY}px`;

      // Update hidden fields for form submission
      xCoordField.value = x;
      yCoordField.value = y;
    }

    // Center the character initially
    let xCoord = parseInt(<%= @character&.x_coord || 0 %>, 10); // Initial X coordinate
    let yCoord = parseInt(<%= @character&.y_coord || 0 %>, 10); // Initial Y coordinate
    moveCharacterToTile(xCoord, yCoord);
    
    gridItems.forEach(item => {
      item.addEventListener('click', async function() {
        const x = this.getAttribute('data-x');
        const y = this.getAttribute('data-y');
        const squareId = this.getAttribute('data-square-id');
        const tileX = parseInt(this.getAttribute('data-x'), 10);
        const tileY = parseInt(this.getAttribute('data-y'), 10);

        xCoord = tileX;
        yCoord = tileY;

        moveCharacterToTile(tileX, tileY);

        squareCoordinates.textContent = `Coordinates: (${x}, ${y})`;
        squareId.textContent = `Square ID: ${id}`;
        modal.style.display = 'flex';

        // Visual feedback for selected tile
        gridItems.forEach((tile) => tile.classList.remove('selected-tile'));
        this.classList.add('selected-tile');

        try {
          const response = await fetch(`/generate_square_code?x=${x}&y=${y}`);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();
          
          if (data.success && data.code) {
            const canvas = this.querySelector('canvas');
            const ctx = canvas.getContext('2d');
            
            // Clear the existing canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Execute the new code
            eval(data.code);
          } else {
            console.error('Error:', data.error);
            // Optionally show error to user
            //alert('Failed to generate terrain. Please try again.');
          }
        } catch (error) {
          console.error('Error generating square:', error);
          // Optionally show error to user
          //alert('Failed to generate terrain. Please try again.');
        }

        // Close the modal
        closeButton.addEventListener('click', () => {
          modal.style.display = 'none';
        });
      });
    });

    // Save button updates hidden fields
    saveWorldButton.addEventListener('click', function () {
        xCoordField.value = xCoord;
        yCoordField.value = yCoord;
    });

  });
</script>

<style>
  .grid {
    display: grid;
    grid-template-columns: repeat(6, 105px);
    gap: 2px;
    padding: 20px;
  }
  
  .grid-item {
    width: 105px;
    height: 105px;
    cursor: pointer;
    transition: transform 0.1s;
  }
  
  .grid-item:hover {
    transform: scale(1.05);
  }
  
  canvas {
    display: block;
  }
  .button-container .button {
      text-decoration: none;
      display: inline-block;
      padding: 10px 20px;
      font-size: 14px;
      color: #fff; /* Text color */
      background-color: #007bff; /* Button background color */
      border: none;
      border-radius: 5px;
      text-align: center;
      cursor: pointer;
      transition: background-color 0.3s ease;
  }

  .button-container .button:hover {
      background-color: #0056b3; /* Darker blue on hover */
  }

</style>

<%== @js_functions %>