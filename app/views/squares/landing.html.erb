<div class="container">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <div class="top-banner">
    <h2 class="title">Pretty Pirates</h2>

    <%= stylesheet_link_tag 'landing', media: 'all', 'data-turbo-track': 'reload', defer: true %>
    <%= javascript_include_tag 'landing', 'data-turbo-track': 'reload', defer: true %>

    <div class="dropdown-menu-container">
      <button class="dropdown-button">Menu</button>
      <div class="dropdown-content">
        <%= link_to 'Settings', settings_path(return_path: request.fullpath), class:'btn btn-primary dropdown_link' %>
        <a href="#" id="store-link">Store</a>
        <%= link_to 'Exit World', worlds_path, class:'btn btn-primary dropdown_link' %>
      </div>
    </div>
  </div>

  <!-- Debug info -->
  <% if @squares.present? %>
  <% end %>

  <div class="grid-teleport-container">
    <div class="grid">
      <% if @squares.present? %>
        <% @squares.each do |square| %>
          <div class="grid-item"
               id="square_<%= square.square_id %>"
               data-square-id="<%= square.square_id %>"
               data-x="<%= square.x %>"
               data-y="<%= square.y %>"
               data-state="<%= square.state %>">
            <% if square.code.present? %>
              <canvas width="105" height="105"></canvas>
              <script>
                document.addEventListener('DOMContentLoaded', () => {
                  const canvas = document.querySelector('#square_<%= square.square_id %> canvas');
                  const ctx = canvas.getContext('2d');
                  <%= square.code.html_safe %>
                });
              </script>
            <% else %>
              <canvas width="105" height="105"></canvas>
              <script>
                document.addEventListener('DOMContentLoaded', () => {
                  const canvas = document.querySelector('#square_<%= square.square_id %> canvas');
                  const ctx = canvas.getContext('2d');
                  ctx.fillStyle = '#eee';
                  ctx.fillRect(0, 0, 105, 105);
                  ctx.fillStyle = '#666';
                  ctx.font = '12px Arial';
                  ctx.fillText('(<%= square.x %>, <%= square.y %>)', 35, 55);
                });
              </script>
            <% end %>
          </div>
        <% end %>
        <% @world.characters.each do |character| %>
          <% 
            # Simple grid-based positioning
            tile_size = 105
            grid_offset_x = 450  # Adjusted base offset to match grid
            grid_offset_y = 175  # Adjusted base offset to match grid
            
            # Calculate position based on grid coordinates
            char_x = grid_offset_x + (character.x_coord.to_i * tile_size)
            char_y = grid_offset_y + (character.y_coord.to_i * tile_size)
          %>
          <div class="character"
               data-character-id="<%= character.id %>"
               data-is-current-user="<%= character.user_id == current_user.id %>"
               data-x="<%= character.x_coord %>"
               data-y="<%= character.y_coord %>"
               style="position: absolute; 
                      top: <%= char_y %>px; 
                      left: <%= char_x %>px;
                      z-index: 1000;">
            <%= image_tag asset_path(character.image_code), width: '100', height: '100' if character.image_code %>
          </div>
        <% end %>
      <% else %>
        <p>No squares found for this world!</p>
      <% end %>
    </div>

    <div class="teleport-container" data-character-id="<%= @character.id %>">
      <%= form_with url: coordinates_path, method: :post, local: true do |form| %>
        <%= form.hidden_field :id, value: @character&.id %>
        <%= form.hidden_field :x, value: '', id: 'x-coord' %>
        <%= form.hidden_field :y, value: '', id: 'y-coord' %>
        <%= form.submit 'Save World', class: 'btn btn-primary', id:"teleport-button" %>
      <% end %>
      <p class="shards-count">Shards: <%= @character.shards || "Can't find shard count.y" %></p>
    </div>
  </div>

  <!-- Store Modal -->
  <div id="store-modal" class="modal">
    <div class="modal-content">
      <div class="store-banner">
        <h2 class="store-title">Store</h2>
      </div>
      <span class="close-button">&times;</span>
      <div class="store-grid">
        <% @prices.each do |key, price| %>
          <div class="store-grid-item">
            <button class="item-button" data-name="<%= key.to_s.humanize %>" data-price="<%= price %> <%= @currency %>">
              <div class="item-content">
                <%= image_tag "shards/#{key}.png", alt: "#{key.to_s.humanize}", style: "width: 100%; height: auto; object-fit: cover; border-radius: 8px;" %>
                <p class="item-price"><%= key.to_s.humanize %>: <br><%= price %> <%= @currency %></p>
                <% if key.to_s == 'hat_of_shards_50' %>
                  <p class="discount">20% off!</p>
                <% elsif key.to_s == 'chest_of_shards_100' %>
                  <p class="discount">33% off!</p>
                <% end %>
              </div>
            </button>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <!-- Purchase Modal -->
  <div id="purchase-modal" class="modal">
    <div class="modal-content">
      <div class="store-banner">
        <h2 class="store-title">Purchase Item</h2>
      </div>
      <span class="close-button">&times;</span>
      <div class="purchase-form">
        <h3 id="item-name"></h3>
        <p id="item-price"></p>
        <form id="purchase-form">
          <label for="card-number">Card Number:</label>
          <input type="text" id="card-number" name="card-number" placeholder="XXXX XXXX XXXX XXXX" required>

          <label for="expiration-date">Expiration Date:</label>
          <input type="text" id="expiration-date" name="expiration-date" placeholder="MM/YY" required>

          <label for="cvv">CVV:</label>
          <input type="text" id="cvv" name="cvv" placeholder="XXX" required>

          <button type="submit" class="btn">Purchase</button>
        </form>
      </div>
    </div>
  </div>

  <!-- Unlock Square Modal -->
  <div id="popup-modal" class="modal">
    <div class="modal-content">
      <span class="close-button">&times;</span>
      <h3>Square Details</h3>
      <p id="square-coordinates"></p>
      <div class="button-container">
        <a href="<%= matching_game_path(world_id: @world.id, user_id: @user.id) %>" id="minigame-button" class="button">Play Minigame</a>
        <button id="pay-shard-button" class="button" data-url="<%= pay_shards_path %>" data-square-id="">Pay 10 shards</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get all the necessary elements and data
    const character = document.querySelector(`.character[data-is-current-user="true"]`);
    const xCoordField = document.getElementById('x-coord');
    const yCoordField = document.getElementById('y-coord');
    const modal = document.getElementById('popup-modal');
    const payShardButton = document.getElementById('pay-shard-button');
    const csrfToken = document.querySelector('[name="csrf-token"]')?.content;
    
    // Add these variables from Ruby
    const worldId = '<%= @world.id %>';
    const userId = '<%= @user.id %>';

    // Grid configuration
    const gridSize = 6; // 6x6 grid
    const tileSize = 105; // Each tile is 100px x 100px
    
    // Load the initial position from the server-side data
    const initialX = parseInt(character.getAttribute('data-x'));
    const initialY = parseInt(character.getAttribute('data-y'));
    
    // Center the character initially at its saved position
    moveCharacterToTile(initialX, initialY);

    // Grid click handler
    document.querySelectorAll('.grid-item').forEach(square => {
      square.addEventListener('click', async function() {
        const state = this.getAttribute('data-state');
        const x = parseInt(this.getAttribute('data-x'));
        const y = parseInt(this.getAttribute('data-y'));
        const squareId = this.getAttribute('data-square-id');

        // Get current character position
        const currentX = parseInt(character.getAttribute('data-x'));
        const currentY = parseInt(character.getAttribute('data-y'));
        
        if (state === 'active') {
          // Check if the clicked tile is adjacent
          const isAdjacent = (Math.abs(x - currentX) <= 1 && Math.abs(y - currentY) <= 1) && !(x === currentX && y === currentY);

          if (isAdjacent) {
            moveCharacterToTile(x, y);
          } else {
            // Calculate shard cost for non-adjacent movement
            const calculatedShardCost = Math.abs(x - currentX) + Math.abs(y - currentY);
            
            const confirmMove = confirm(
              `This move will cost ${calculatedShardCost} shards. Do you want to proceed?`
            );

            if (confirmMove) {
              try {
                // First attempt to move the character
                const moveResult = await moveCharacterToTile(x, y);
                
                if (moveResult && moveResult.success) {
                  // If movement was successful, update shards display
                  const shardsDisplay = document.querySelector('.shards-count');
                  if (shardsDisplay) {
                    const currentShards = parseInt(shardsDisplay.textContent.match(/\d+/)[0]);
                    shardsDisplay.textContent = `Shards: ${currentShards - calculatedShardCost}`;
                  }
                }
              } catch (error) {
                console.error('Movement failed:', error);
                alert('Unable to complete movement. Please try again.');
              }
            }
          }
        } else if (state === 'inactive') {
          // Reset the button container to its original state
          const buttonContainer = document.querySelector('.button-container');
          const minigameUrl = `/matching_game?world_id=${worldId}&user_id=${userId}&square_id=${squareId}`;

          buttonContainer.innerHTML = `
            <a href="${minigameUrl}"
             id="minigame-button"
             class="button">Play Minigame</a>
            <button id="pay-shard-button"
              class="button"
              data-url="<%= pay_shards_path %>"
              data-square-id="${squareId}">Pay 10 shards</button>
          `;

          // Reattach event listener to the new pay shard button
          const newPayShardButton = document.getElementById('pay-shard-button');
          if (newPayShardButton) {
            setupPayShardButton(newPayShardButton);
          }

          // Show popup for inactive tiles
          document.getElementById('square-coordinates').textContent = `Coordinates: (${x}, ${y})`;
          modal.style.display = 'flex';
        }
      });
    });

    // Function to move character to the correct tile and save coordinates
    async function moveCharacterToTile(x, y, specificCharacter = null) {
      const targetCharacter = specificCharacter || character;
      if (!targetCharacter) {
        console.error('No character found');
        return { success: false };
      }

      const gridContainer = document.querySelector('.grid');
      const targetSquare = document.querySelector(`.grid-item[data-x="${x}"][data-y="${y}"]`);
      
      if (!gridContainer || !targetSquare) {
        console.error('Grid container or target square not found');
        return { success: false };
      }

      try {
        const gridRect = gridContainer.getBoundingClientRect();
        const squareRect = targetSquare.getBoundingClientRect();
        
        const characterWidth = targetCharacter.offsetWidth;
        const characterHeight = targetCharacter.offsetHeight;
        
        const relativeX = squareRect.left - gridRect.left;
        const relativeY = squareRect.top - gridRect.top;
        
        targetCharacter.style.position = 'absolute';
        targetCharacter.style.left = `${relativeX + (squareRect.width - characterWidth) / 2}px`;
        targetCharacter.style.top = `${relativeY + (squareRect.height - characterHeight) / 2}px`;
        
        // Update the data attributes
        targetCharacter.setAttribute('data-x', x);
        targetCharacter.setAttribute('data-y', y);

        // If this is the current user's movement, save to server
        if (targetCharacter === character) {
          const response = await fetch(`/characters/${targetCharacter.getAttribute('data-character-id')}/save_coordinates`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('[name="csrf-token"]')?.content
            },
            body: JSON.stringify({
              x: x,
              y: y
            })
          });

          const data = await response.json();
          
          if (!response.ok) {
            console.error('Failed to save coordinates:', data.error);
            // Revert the movement if save failed
            targetCharacter.setAttribute('data-x', data.x);
            targetCharacter.setAttribute('data-y', data.y);
            return { success: false, error: data.error };
          }
          
          return { success: true, data };
        }
        
        return { success: true };
      } catch (error) {
        console.error('Error in moveCharacterToTile:', error);
        return { success: false, error: error.message };
      }
    }

    // Function to calculate grid offsets
    function calculateGridOffsets() {
      const gridWidth = gridSize * tileSize;
      const gridHeight = gridSize * tileSize;
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;

      return {
        x_char: (screenWidth - gridWidth) / 2,
        y_char: (screenHeight - gridHeight) / 2
      };
    }

    // Add this function at the top level of your JavaScript
    function animateDots() {
      const dots = document.querySelector('.dots');
      if (dots) {
        let count = 0;
        const interval = setInterval(() => {
          count = (count + 1) % 4;
          dots.textContent = '.'.repeat(count);
        }, 500);
        return interval;
      }
      return null;
    }

    // Update the setupPayShardButton function
    function setupPayShardButton(button) {
      button.addEventListener('click', async function() {
        const squareId = this.getAttribute('data-square-id');
        const square = document.querySelector(`[data-square-id="${squareId}"]`);
        const buttonContainer = document.querySelector('.button-container');

        try {
          const response = await fetch(`/pay_shards`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': csrfToken,
            },
            body: JSON.stringify({
              square_id: squareId,
              character_id: '<%= @character.id %>',
              world_id: worldId
            })
          });

          const data = await response.json();

          if (data.success) {
            // Show loading state with animated dots
            buttonContainer.innerHTML = `
              <div class="loading-container">
                <div class="loading-text">
                  Generating terrain<span class="dots"></span>
                </div>
              </div>
            `;

            const dotsInterval = animateDots();

            // Add a slight delay to show the loading state
            await new Promise(resolve => setTimeout(resolve, 2000));

            // Clear the dots animation
            if (dotsInterval) clearInterval(dotsInterval);

            // Update the square's state and appearance
            square.setAttribute('data-state', 'active');
            if (data.square && data.square.code) {
              const canvas = square.querySelector('canvas');
              const ctx = canvas.getContext('2d');
              ctx.clearRect(0, 0, canvas.width, canvas.height);
              eval(data.square.code);
            }

            // Update shards count in the UI
            document.querySelector('.shards-count').textContent = `Shards: ${data.new_shards}`;

            // Move character to the new square
            const x = parseInt(square.getAttribute('data-x'));
            const y = parseInt(square.getAttribute('data-y'));
            moveCharacterToTile(x, y);

            // Close modal
            modal.style.display = 'none';
          } else {
            alert(data.message || 'Not enough shards');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while processing payment');
        }
      });
    }

    // Initial setup of pay shard button
    if (payShardButton) {
      setupPayShardButton(payShardButton);
    }

    // Handle game result if present
    const urlParams = new URLSearchParams(window.location.search);
    const gameResult = urlParams.get('game_result');
    const squareId = urlParams.get('square_id');
    
    if (gameResult === 'true' && squareId) {
      const winningSquare = document.querySelector(`.grid-item[data-square-id="${squareId}"]`);
      if (winningSquare) {
        const x = parseInt(winningSquare.getAttribute('data-x'));
        const y = parseInt(winningSquare.getAttribute('data-y'));
        winningSquare.setAttribute('data-state', 'active');
        moveCharacterToTile(x, y);
      }
    }

    // Close modal when clicking X
    const closeButton = modal.querySelector('.close-button');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        modal.style.display = 'none';
      });
    }

    // Function to update other characters' positions
    function updateCharacterPosition(characterId, x, y) {
      const characterElement = document.querySelector(`.character[data-character-id="${characterId}"]`);
      if (characterElement && characterElement.getAttribute('data-is-current-user') !== 'true') {
        const targetSquare = document.querySelector(`.grid-item[data-x="${x}"][data-y="${y}"]`);
        if (!targetSquare) return;

        const gridContainer = document.querySelector('.grid');
        const gridRect = gridContainer.getBoundingClientRect();
        const squareRect = targetSquare.getBoundingClientRect();
        const characterWidth = characterElement.offsetWidth;
        const characterHeight = characterElement.offsetHeight;

        const relativeX = squareRect.left - gridRect.left;
        const relativeY = squareRect.top - gridRect.top;

        characterElement.style.position = 'absolute';
        characterElement.style.left = `${relativeX + (squareRect.width - characterWidth) / 2}px`;
        characterElement.style.top = `${relativeY + (squareRect.height - characterHeight) / 2}px`;
        characterElement.setAttribute('data-x', x);
        characterElement.setAttribute('data-y', y);
      }
    }

    // Set up Action Cable consumer
    const consumer = ActionCable.createConsumer();
    
    // Create the subscription
    const gameChannel = consumer.subscriptions.create(
      { 
        channel: "GameChannel",
        world_id: '<%= @world.id %>',
        character_id: '<%= @character.id %>'
      },
      {
        received: function(data) {
          if (data.type === 'character_moved') {
            const targetCharacter = document.querySelector(`.character[data-character-id="${data.character_id}"]`);
            if (targetCharacter && targetCharacter.getAttribute('data-is-current-user') !== 'true') {
              moveCharacterToTile(data.x, data.y, targetCharacter);
            }
          }
        }
      }
    );

    // Add window resize handler to update all character positions
    window.addEventListener('resize', () => {
      document.querySelectorAll('.character').forEach(char => {
        const x = parseInt(char.getAttribute('data-x'));
        const y = parseInt(char.getAttribute('data-y'));
        if (char.getAttribute('data-is-current-user') === 'true') {
          moveCharacterToTile(x, y);
        } else {
          updateCharacterPosition(char.getAttribute('data-character-id'), x, y);
        }
      });
    });
  });
</script>

<style>
  .grid {
    position: relative;
    display: grid;
    grid-template-columns: repeat(6, 105px);
    gap: 2px;
    padding: 20px;
  }
  
  .grid-item {
    width: 105px;
    height: 105px;
    cursor: pointer;
    transition: transform 0.1s;
  }
  
  .grid-item:hover {
    transform: scale(1.05);
  }
  
  canvas {
    display: block;
  }
  .button-container .button {
      text-decoration: none;
      display: inline-block;
      padding: 10px 20px;
      font-size: 14px;
      color: #fff; /* Text color */
      background-color: #007bff; /* Button background color */
      border: none;
      border-radius: 5px;
      text-align: center;
      cursor: pointer;
      transition: background-color 0.3s ease;
  }

  .button-container .button:hover {
      background-color: #0056b3; /* Darker blue on hover */
  }

  .loading-text {
    color: #666;
    font-size: 1.2em;
    margin: 20px 0;
    text-align: center;
  }

  .button-container {
    text-align: center;
  }

  .loading-container {
    text-align: center;
    padding: 20px;
  }
  
  .loading-text {
    font-size: 1.2em;
    color: #666;
  }
  
  .dots {
    display: inline-block;
    min-width: 30px;
    text-align: left;
  }

  .character {
    position: absolute;
    z-index: 1000;
  }

</style>

<% if Rails.env.development? %>
  <script>
    console.log('Game Result:', '<%= @game_result %>');
    console.log('Square ID:', '<%= @square_id %>');
    <% if @square %>
      console.log('Square Data:', <%= raw @square.to_json %>);
    <% end %>
  </script>
<% end %>

<%== @js_functions %>